<?php
namespace App\Models;
/**
* Auto Generated By TrigerIgniter v1
* Codeigniter Version 4.1.x
* Codeigniter Model
**/
require_once(APPPATH.'ThirdParty'.DIRECTORY_SEPARATOR.'phpspreadsheet'.DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php');
use PhpOffice\PhpSpreadsheet\Helper\Sample;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use CodeIgniter\Model;

class Purchases_model extends Model
{
    protected $table      = 'purchases';
    protected $primaryKey = 'id';

    //To help protect against Mass Assignment Attacks, the Model class requires 
    //that you list all of the field names that can be changed during inserts and updates
    // https://codeigniter4.github.io/userguide/models/model.html#protecting-fields
    protected $allowedFields = ['id', 'master_id', 'quantity', 'price', 'date', 'user_account', 'description', 'sold'];

    protected $useAutoIncrement = false;

    // protected $returnType     = 'array';
    protected $returnType     = 'object';
    protected $useSoftDeletes = false;

    protected $useTimestamps = false;
    protected $createdField  = 'created_at';
    protected $updatedField  = 'updated_at';
    protected $deletedField  = 'deleted_at';

    protected $validationRules    = [];
    protected $validationMessages = [];
    protected $skipValidation     = false;

    public $order = "DESC";
    public $columnIndex = "id";

    public function getFields(){
        return $this->allowedFields;
    }

    public function getById($id)
    {
        return $this->where($this->primaryKey, $id)->sort()->first();
    }

    public function getRowBy($key, $val)
    {
        return $this->where($key, $val)->sort()->first();
    }

    public function getBy($key, $val)
    {
        return $this->where($key, $val)->sort()->findAll();
    }

    public function totalRows($arr = NULL)
    {
        if ($arr == NULL) {
            return $this->countAllResults();
        }else{
            if(is_array($arr)) {
                foreach ($arr as $key => $value) {
                    $this->where($key, $value);
                };
            }else{
                $this->getData($arr);
            }
            return $this->countAllResults();
        }
    }

    public function getData($keyword = null)
    {
        if ($keyword == null) {
            return $this->sort();
        };
        $this
            ->groupStart()
            ->like($this->table . '.master_id', $keyword)
            ->orLike($this->table . '.quantity', $keyword)
            ->orLike($this->table . '.price', $keyword)
            ->orLike($this->table . '.date', $keyword)
            ->orLike($this->table . '.user_account', $keyword)
            ->orLike($this->table . '.description', $keyword)
            ->orLike($this->table . '.sold', $keyword)
            ->groupEnd();
        return $this->sort();
    }

    public function sort($columnIndex = NULL, $sortDirection = NULL)
    {
        if($columnIndex == NULL){
            if (strpos($this->columnIndex, ".") !== FALSE) {
                $columnIndex = $this->columnIndex;
            }else{
                $columnIndex = $this->table . '.' . $this->columnIndex;
            }
        };
        if($sortDirection == NULL){
            $sortDirection = $this->order;
        };
        return $this->orderBy($columnIndex, $sortDirection);
    }

    public function truncate(){
        $this->query('TRUNCATE '.$this->table);
        return TRUE;
    }
    
    //COLUMNHEADER_STYLE_PHPSPREADSHEET
    public $headerStyle = array(
                'font' => array('bold' => true), // Set font nya jadi bold
                'alignment' => array(
                    'horizontal' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER, // Set text jadi ditengah secara horizontal (center)
                    'vertical' => \PhpOffice\PhpSpreadsheet\Style\Alignment::VERTICAL_CENTER // Set text jadi di tengah secara vertical (middle)
                ),
                'borders' => array(
                    'top' => ['borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN], // Set border top dengan garis tipis
                    'right' => ['borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN],  // Set border right dengan garis tipis
                    'bottom' => ['borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN], // Set border bottom dengan garis tipis
                    'left' => ['borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN] // Set border left dengan garis tipis
                )
            );

    //EXPORT_PHPSPREADSHEET_FUNCTION
    public function export()
    {
        $spreadsheet = new Spreadsheet();
        // Set document properties
        $spreadsheet->getProperties()->setCreator('shouts')
        ->setLastModifiedBy('shouts')
        ->setTitle('Purchases Data')
        ->setSubject('Purchases Data')
        ->setDescription('Purchases Data '.date("Y"))
        ->setKeywords('Purchases')
        ->setCategory('Purchases');

        // subtitle on row 3
        $spreadsheet->setActiveSheetIndex(0)->setCellValue('A3', 'Purchases Data '.date("Y"));
        $spreadsheet->getActiveSheet()->mergeCells('A3:E3');
        // date on row 4
        $spreadsheet->setActiveSheetIndex(0)->setCellValue('A4', date("d M Y H:i"));
        $spreadsheet->getActiveSheet()->mergeCells('A4:E4');

        // columnHeader
        $startRowHeader = 6;
        $highestColumn = "H";
        $spreadsheet->setActiveSheetIndex(0)
        ->setCellValue('A'.$startRowHeader, '#')
        ->setCellValue('B'.$startRowHeader, 'Master_id')
        ->setCellValue('C'.$startRowHeader, 'Quantity')
        ->setCellValue('D'.$startRowHeader, 'Price')
        ->setCellValue('E'.$startRowHeader, 'Date')
        ->setCellValue('F'.$startRowHeader, 'User_account')
        ->setCellValue('G'.$startRowHeader, 'Description')
        ->setCellValue('H'.$startRowHeader, 'Sold')
        ;
        // set column header style
        $spreadsheet->getActiveSheet()->getStyle("A".$startRowHeader)->applyFromArray($this->headerStyle);
        $spreadsheet->getActiveSheet()->getStyle('B'.$startRowHeader)->applyFromArray($this->headerStyle);
        $spreadsheet->getActiveSheet()->getStyle('C'.$startRowHeader)->applyFromArray($this->headerStyle);
        $spreadsheet->getActiveSheet()->getStyle('D'.$startRowHeader)->applyFromArray($this->headerStyle);
        $spreadsheet->getActiveSheet()->getStyle('E'.$startRowHeader)->applyFromArray($this->headerStyle);
        $spreadsheet->getActiveSheet()->getStyle('F'.$startRowHeader)->applyFromArray($this->headerStyle);
        $spreadsheet->getActiveSheet()->getStyle('G'.$startRowHeader)->applyFromArray($this->headerStyle);
        $spreadsheet->getActiveSheet()->getStyle('H'.$startRowHeader)->applyFromArray($this->headerStyle);
        // set column header autosize
        $spreadsheet->getActiveSheet()->getColumnDimension("A")->setAutoSize(true);
        $spreadsheet->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
        $spreadsheet->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);
        $spreadsheet->getActiveSheet()->getColumnDimension('D')->setAutoSize(true);
        $spreadsheet->getActiveSheet()->getColumnDimension('E')->setAutoSize(true);
        $spreadsheet->getActiveSheet()->getColumnDimension('F')->setAutoSize(true);
        $spreadsheet->getActiveSheet()->getColumnDimension('H')->setAutoSize(true);

        // merge top row as title
        $spreadsheet->getActiveSheet()->mergeCells('A1:'.$highestColumn.'1');
        $spreadsheet->setActiveSheetIndex(0)->setCellValue('A1', "Purchases Data");
        $spreadsheet->getActiveSheet()->getStyle('A1:'.$highestColumn.'1')->applyFromArray($this->headerStyle);

        $startRowBody = $startRowHeader+1;
        $index = 0;
        $data_purchases = $this->orderBy($this->columnIndex, $this->order)->findAll();
        foreach ($data_purchases as $key => $purchases) {
            $spreadsheet->setActiveSheetIndex(0)->setCellValue('A'.$startRowBody, ++$index);
            if(isset($purchases->master_id))
                $spreadsheet->setActiveSheetIndex(0)->setCellValue('B'.$startRowBody, $purchases->master_id);
            if(isset($purchases->quantity))
                $spreadsheet->setActiveSheetIndex(0)->setCellValue('C'.$startRowBody, $purchases->quantity);
            if(isset($purchases->price))
                $spreadsheet->setActiveSheetIndex(0)->setCellValue('D'.$startRowBody, $purchases->price);
            if(isset($purchases->date))
                $spreadsheet->setActiveSheetIndex(0)->setCellValue('E'.$startRowBody, $purchases->date);
            if(isset($purchases->user_account))
                $spreadsheet->setActiveSheetIndex(0)->setCellValue('F'.$startRowBody, $purchases->user_account);
            if(isset($purchases->description))
                $spreadsheet->setActiveSheetIndex(0)->setCellValue('G'.$startRowBody, $purchases->description);
            if(isset($purchases->sold))
                $spreadsheet->setActiveSheetIndex(0)->setCellValue('H'.$startRowBody, $purchases->sold);
            $startRowBody++;
        };

        $spreadsheet->getActiveSheet()->setTitle('Purchases Data '.date('Y'));
        $spreadsheet->setActiveSheetIndex(0);
        // Redirect output to a clientâ€™s web browser (Xlsx)
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Purchases '.date("Y").'.xlsx"');
        header('Cache-Control: max-age=0');
        // If you're serving to IE 9, then the following may be needed
        header('Cache-Control: max-age=1');

        // If you're serving to IE over SSL, then the following may be needed
        header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
        header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
        header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
        header('Pragma: public'); // HTTP/1.0

        $writer = IOFactory::createWriter($spreadsheet, 'Xlsx');
        $writer->save('php://output');
    }

    //IMPORT_PHPSPREADSHEET_FUNCTION
    public function import($filepath){        
        $reader = new \PhpOffice\PhpSpreadsheet\Reader\Xlsx();
        $reader->setReadDataOnly(true);

        $spreadsheet = $reader->load($filepath);
        $sheet = $spreadsheet->getSheet(0);
        $highestRow = $sheet->getHighestRow();
        $highestColumn = $sheet->getHighestColumn();

        $startImport = FALSE;
        $doInsert = FALSE;
        $startColumnIndex = 0;
        $counter = 0;

        for ($row = 1; $row <= $highestRow; $row++) {                  //  Read a row of data into an array                 
            $cellData = $sheet->rangeToArray(
                'A' . $row . ':' . $highestColumn . $row,
                NULL,
                TRUE,
                FALSE
            );

            // Sesuaikan key array dengan nama kolom di database
            if ($cellData == NULL) continue;
            // Pastikan kolom pertama atau kedua tidak kosong
            if ((!isset($cellData[0][0])) && (!isset($cellData[0][1])) && ($cellData[0][0] == NULL) && ($cellData[0][1] == NULL)) continue;
            
            $doInsert = FALSE;
            if ($startImport == TRUE) {
                $insertData = [];
                if (isset($cellData[0][$startColumnIndex + 0])){
                    $insertData["master_id"] = $cellData[0][$startColumnIndex + 0];
                    $doInsert = TRUE;
                }else {
                    $doInsert = FALSE;
                }
                if (isset($cellData[0][$startColumnIndex + 1])){
                    $insertData["quantity"] = $cellData[0][$startColumnIndex + 1];
                    $doInsert = TRUE;
                }else {
                    $doInsert = FALSE;
                }
                if (isset($cellData[0][$startColumnIndex + 2])){
                    $insertData["price"] = $cellData[0][$startColumnIndex + 2];
                    $doInsert = TRUE;
                }else {
                    $doInsert = FALSE;
                }
                if (isset($cellData[0][$startColumnIndex + 3])){
                    $insertData["date"] = $cellData[0][$startColumnIndex + 3];
                    $doInsert = TRUE;
                }
                if (isset($cellData[0][$startColumnIndex + 4])){
                    $insertData["user_account"] = $cellData[0][$startColumnIndex + 4];
                    $doInsert = TRUE;
                }else {
                    $doInsert = FALSE;
                }
                if (isset($cellData[0][$startColumnIndex + 5])){
                    $insertData["description"] = $cellData[0][$startColumnIndex + 5];
                    $doInsert = TRUE;
                }
                if (isset($cellData[0][$startColumnIndex + 6])){
                    $insertData["sold"] = $cellData[0][$startColumnIndex + 6];
                    $doInsert = TRUE;
                }

                if($doInsert){
                    $this->insert($insertData);
                    $counter++;
                }
            } else {
                if (
                    // jika kolom pertama tanpa nomor
                    strtolower($cellData[0][0]) == "master_id" &&
                    strtolower($cellData[0][1]) == "quantity" &&
                    strtolower($cellData[0][2]) == "price" &&
                    strtolower($cellData[0][3]) == "date" &&
                    strtolower($cellData[0][4]) == "user_account" &&
                    strtolower($cellData[0][5]) == "description" &&
                    strtolower($cellData[0][6]) == "sold"
                ) {
                    $startImport = TRUE;
                    $startColumnIndex = 0;
                } elseif
                (
                    // jika kolom pertama adalah nomor
                    (strtolower($cellData[0][0]) == "no" || strtolower($cellData[0][0]) == "#") &&
                    strtolower($cellData[0][1]) == "master_id" &&
                    strtolower($cellData[0][2]) == "quantity" &&
                    strtolower($cellData[0][3]) == "price" &&
                    strtolower($cellData[0][4]) == "date" &&
                    strtolower($cellData[0][5]) == "user_account" &&
                    strtolower($cellData[0][6]) == "description" &&
                    strtolower($cellData[0][7]) == "sold"
                ) {
                    $startImport = TRUE;
                    $startColumnIndex = 1;
                }
            };
        };

        return $counter;
    }
    //END_PHPSPREADSHEET_FUNCTION
}
